from django.shortcuts import get_object_or_404, render
from django.db.models import F

from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.views import generic
from django.utils import timezone

from .models import Choice, Question
# Create your views here.

# writing views the hard way
# def index(request):
# 	latest_question_list = Question.objects.order_by('-pub_date')[:5]
# 	context = {'latest_question_list': latest_question_list,}

# 	return render(request,'polls/index.html',context)

# def detail(request, question_id):
# 	question = get_object_or_404(Question, pk=question_id)
# 	return render(request,'polls/detail.html',{'question':question})

# def results(request, question_id):
# 	question = get_object_or_404(Question, pk=question_id)
# 	return render(request, 'polls/results.html', {'question': question})

# def vote(request, question_id):
# 	question = get_object_or_404(Question, pk=question_id)
# 	try:
# 		selected_choice = question.choice_set.get(pk=request.POST['choice'])
# 	except (KeyError, Choice.DoesNotExist):
# 		#check for key error
# 		#show question voting page again with error msg
# 		return render(request,'polls/detail.html', {
# 			'question': question,
# 			'error_message': "Y u no select choice"
# 			})
# 	else:
# 		#F() overrides python operators to create SQL expression, db deals with selected_choice.votes & python doesnt know the value, just adds 1 to it. This avoids race conditions
# 		selected_choice.refresh_from_db()
# 		selected_choice.votes = F('votes')+ 1
# 		selected_choice.save()

# 		#ALWAYS return HttpResponseRedirect after succesfully dealing
# 		#when posting data, this prevents data being posted 2x if user hits BACK
# 	return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))


# writing views using generic views by defining classes of views:
class IndexView(generic.ListView):
	# tells view where the template is
	template_name = 'polls/index.html'

	# so it can find what the variable values are
	# ListView autogenerates context variable question_list, but we want latest_question_list
	context_object_name = 'latest_question_list'
	def get_queryset(self):
		"""Return the last five published questions, but not the ones set to be published in the future."""

		#filter(...) returns queryset with question with pub date is Less Than or Equal to timezone.now()
		return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]

class DetailView(generic.DetailView):
	model = Question #context variable already given in model
	template_name = 'polls/detail.html' #use this template name instead of autogenerated one
		
class ResultsView(generic.DetailView):
	model = Question
	template_name = 'polls/results.html'

# ListView: list of objs
# DetailView: detail page for particular type of obj
# generic view needs to know which model to act upon
# pk: primary key value from url, formerly question_id

def vote(request, question_id):
	question = get_object_or_404(Question, pk=question_id)
	try:
		selected_choice = question.choice_set.get(pk=request.POST['choice'])
	except (KeyError, Choice.DoesNotExist):
		#check for key error
		#show question voting page again with error msg
		return render(request,'polls/detail.html', {
			'question': question,
			'error_message': "Y u no select choice"
			})
	else:
		#F() overrides python operators to create SQL expression, db deals with selected_choice.votes & python doesnt know the value, just adds 1 to it. This avoids race conditions
		selected_choice.refresh_from_db()
		selected_choice.votes = F('votes')+ 1
		selected_choice.save()

		#ALWAYS return HttpResponseRedirect after succesfully dealing
		#when posting data, this prevents data being posted 2x if user hits BACK
	return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))